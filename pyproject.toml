[tool.poetry]
name = "dcicutils"
version = "8.0.0.1c1"
description = "Utility package for interacting with the 4DN Data Portal and other 4DN resources"
authors = ["4DN-DCIC Team <support@4dnucleome.org>"]
license = "MIT"
readme = "README.rst"
homepage = "https://github.com/4dn-dcic/utils"
repository = "https://github.com/4dn-dcic/utils"
packages = [
  { include="dcicutils", from="." }
]
classifiers = [
    # How mature is this project? Common values are
    #   3 - Alpha
    #   4 - Beta
    #   5 - Production/Stable
    'Development Status :: 4 - Beta',

    # Indicate who your project is intended for
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',

    # Pick your license as you wish (should match "license" above)
    'License :: OSI Approved :: MIT License',

    # Relevant topics
    'Topic :: Database :: Database Engines/Servers',

    # Specify the Python versions you support here.
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11'
]


[tool.poetry.dependencies]
python = ">=3.8,<3.12"
boto3 = "^1.28.57"
botocore = "^1.31.57"
# The DCIC portals (cgap-portal and fourfront) are very particular about which ElasticSearch version.
# This value is intentionally pinned and must not be changed casually.
elasticsearch = "7.13.4"
aws-requests-auth = ">=0.4.2,<1"
docker = "^4.4.4"
gitpython = "^3.1.2"
jsonc-parser = "^1.1.5"
pytz = ">=2020.4"
PyYAML = "^6.0.1"
requests = "^2.21.0"
rfc3986 = "^1.4.0"
structlog = "^19.2.0"
toml = ">=0.10.1,<1"
typing-extensions = ">=3.8"  # Fourfront uses 3.8
urllib3 = "^1.26.6"
webtest = "^2.0.34"
opensearch-py = "^2.0.1"
redis = "^4.5.1"
pyOpenSSL = "^23.1.1"
PyJWT = "^2.6.0"
tqdm = "^4.65.0"


[tool.poetry.dev-dependencies]
boto3-stubs = "^1.28.57"
botocore-stubs = "^1.31.57"
coverage = ">=7.2.3"
# Loaded manually in GA workflow for coverage because a dependency on 2to3
# in its docopts dependency makes a problem for laoding it here in poetry. -kmp 7-Apr-2023
# coveralls = ">=3.3.1"
flake8 = ">=3.9.2"
flaky = ">=3.7.0"
pip-licenses = "^4.3.3"
pytest = "^7.4.2"
pytest-cov = ">=2.7.1"
pytest-mock = ">=1.11.0"
pytest-redis = "^3.0.2"
pytest-runner = ">=5.1"


[tool.poetry.scripts]
publish-to-pypi = "dcicutils.scripts.publish_to_pypi:main"
show-contributors = "dcicutils.contribution_scripts:show_contributors_main"
run-license-checker = "dcicutils.scripts.run_license_checker:main"


[tool.pytest.ini_options]
addopts = "--basetemp=/tmp/pytest"
redis_exec = "/usr/local/bin/redis-server"
filterwarnings = [
    # TODO: These next two are about use of the Version class:
    "ignore:distutils Version classes are deprecated. Use packaging.version instead.:DeprecationWarning",
    "ignore:Setuptools is replacing distutils.:UserWarning",
    # This is a pip-licenses problem (still present in 3.5.5):
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
    "ignore:Boto3 will no longer support Python 3.7 starting December 13, 2023.*:",
]
markers = [
    "working: test should work",
    "integrated: an integration test",
    "integratedx: an excludable integration test, redundantly testing functionality also covered by a unit test",
    "unit: a proper unit test",
    "file_operation: a test that utilizes files",
    "beanstalk_failure: an obsolete beanstalk-related test that needs fixing",
    "direct_es_query: a test of direct ES _search that is disabled for now and needs to move inside the firewall",
    "static: mark as a test that is testing the static form of code, not its runtime functionality",
    "stg_or_prd_testing_needs_repair: some or all of a test that was failing on stg/prd has been temporarily disabled",
    "recordable: uses recording technology so that if RECORDING_ENABLED=TRUE, a new test recording is made",
    "recorded: a test in which previously recorded values will be used in place of certain external callouts",
]
norecursedirs = ["*env", "site-packages", ".cache", ".git", ".idea", "*.egg-info"]
# We don't use pytest-pep8, but if we ever did, its pep8xxx options could be specified here, as in:
# pep8maxlinelength = 120
testpaths = ["test"]

[tool.coverage.report]
# https://coverage.readthedocs.io/en/latest/config.html
exclude_lines = [
  "if __name__ == .__main__.:",
  "pragma: no cover"
]

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
